
                                      Contact Management System

    Step-1 - Create a project - ng new ContactApp(project_name)

    Step-2 - cd ContactApp
    
    Step-3 - code .
    
    Step-4 - To run project - ng serve --open
    
    Step-5 - Clear content in app.component.html(src/app/app.component.html)
    
    Step-6 - Install Bootstrap, Font Awesome and Google Fonts
       --> Install Bootstrap - 'npm i bootstrap' and copy paste the links in index.html
       --> Install Font Awesome - 'npm i --save @fortawesome/fontawesome-free' and copy paste the links in index.html
       --> configure  -  To avoid site down issues(In angular.json)
    
    Step-7 - Create Components
       --> Contact Manager - ng g c contactManager
       --> Add Contact - ng g c addContact
       --> View Contact - ng g c viewContact
       --> Update Contact - ng g c updateContact
    
    Step-8 - Set up path for each component that we need to display in webpages
       --> app-routing.module.ts, 
       Routes[
        //http://localhost:4200 --> '' path for 'redirection' of main page(contact manager) --http://localhost:4200/contact/admin
        {
            path:'',redirectTo:'contact/admin',pathMatch:'full'
        },
        {
          //path for contact manager component
            path:'contact/admin',component:ContactManagerComponent
        }
       ]
    
    Step-9 - Component design
    
    Step-10 - API creation fetching data
    
    Step-11 - Create a folder in src folder for server and a file "db.json"(src/server/db.json)

    Step-12 - Create contact data and add to db.json file(json data)

    Step-13 - Server run
      --> cd src
      --> cd server
      --> npm init - for creating package.json
      --> npm i json-server
      --> Edit package.json file as
                "scripts": {
                    "start": "json-server --watch db.json --port 3000"
                }
      --> npm start

    Step-14 - Create model for Contact and Group
      -->src/models/myContact.ts
      -->src/models/myGroup.ts
      
    Step-15 - Data fetching

      --> In Javascript - Promise -> .then() .catch()
      --> In Angular(Typescript) - Observable -> .subscribe() .catch()
    
    Step-16 - Services
      Pass data from one component to another.
      If two components share same data then we need to create a new service

      Create a new service - ng g s 'service_name'
      --> Create new API services - ng g s services/api {to generate api file in services folder}
    
    Step-17 - HttpClientModule is required - for using http methods

      --> Import HttpClientModule in app.module.ts

    Step-18 - Dependency Injection
      Data sharing between two dependent classes
       --> Perform inside the constructor
       --> Constructor executes first

      Syntax : access specifier variable_name : class_name
        [constructor(access specifier variable_name : class_name){}]

    Step-19 - Data Binding - Data sharing inside a component
        
        1) One way data binding - Data passes through one direction

           a) Component to view (ts->html)
              i) String interpolation - {{variable_name}} - in html
              ii) Property binding [attribute_name]="Property_name"

           b) View to component (html->ts)
              i) Event binding - (event)="function_name()"
                
                eg : js Onclick
                     ts (click)

              ii) Event binding using $event - (event)="function_name($event)"

        2) Two way data binding - Data passes through two directions(ts->html and html->ts)

            --> ngModel -> [(ngModel)]="Property_name"
            --> imports formsmodule in app.module.ts
            --> form i/p tag - must set name attrinute
    
    Step-20 - Directives - To manipulate DOM

        1) Component Directives

        2) Structural Directives
           i) *ngIf - *ngIf="Condition"
           ii) *ngFor - *ngFor="let variable_name of array_name"

    Step-21 - Activated Route
            
        It provides access to information about a route associated with a component that is loaded in an outlet.

        Parameters
        --> url
        --> params - An observable of the matrix parameters scoped to this route.
    
    Step-22 - Pipes
      
        Pipes are simple functions to use in template expressions to accept an input value and return a transformed value.

    --> To create a pipe in angular - ng g p pipe_folder/pipe_name

       for searching- ng g p pipes/filter